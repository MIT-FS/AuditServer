plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'war'
	id "com.palantir.docker" version "0.33.0"
	id "com.palantir.docker-run" version "0.33.0"
	//información de los plugin docker https://github.com/palantir/gradle-docker
}

group = 'us.mitfs.samples'
version = '0.0.1'
sourceCompatibility = '16'

repositories {
	mavenCentral()	
	maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/MIT-FS/Audit4Improve-API")
            credentials {
            //las propiedades gpr.user y gpr.key están configuradas en gradle.properties en el raiz del proyecto, y se añade a .gitignore para que no se suban
            //O bien configuro las variables de entorno GITHUB_LOGIN y GITHUB_PACKAGES
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_LOGIN")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES")
               
                }
        }
    maven {
		url "https://mvnrepository.com/artifact/com.spotify/github-client"
	}
}

dependencies {
    implementation 'us.mitfs.samples:a4i:0.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'com.spotify', name: 'github-client', version: '0.1.28'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'	
}
docker {
    copySpec.from("build/libs").into("build/libs")
    name 'auditserver'
    buildArgs([VERSION:version])
}
dockerRun {
    name 'auditServerContainer'
    image 'auditserver'
    ports '8080:8080'
    daemonize true
    env 'GITHUB_LOGIN': project.findProperty("gpr.user") ?: System.getenv("GITHUB_LOGIN"), 'GITHUB_OAUTH': project.findProperty("gpr.key") ?: System.getenv("GITHUB_OAUTH")
}

tasks.named('test') {
	useJUnitPlatform()

}

tasks.register('localenv-up') {
	doLast {
		exec {
			executable "./scripts/localenv/up.sh"
		}
	}
}

tasks.register('localenv-down') {
	doLast {
		exec {
			executable "./scripts/localenv/down.sh"
		}
	}
}

tasks.register('localenv-build') {
	dependsOn 'localenv-up'
	doLast {
		exec {
			executable "./scripts/localenv/build.sh"
		}
	}
}

tasks.register('localenv-deploy') {
	dependsOn 'localenv-build'
	doLast {
		exec {
			executable "./scripts/localenv/deploy.sh"
		}
	}

}
