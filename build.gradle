import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerSaveImage
import com.bmuschko.gradle.docker.tasks.image.DockerLoadImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java'
	id 'com.bmuschko.docker-remote-api' version '9.4.0'
	id 'eclipse'
	//https://bmuschko.com/blog/dockerized-spring-boot-app/
	//id "com.palantir.docker" version "0.36.0"
	//id "com.palantir.docker-run" version "0.36.0"
	//información de los plugin docker https://github.com/palantir/gradle-docker
}

group = 'us.mitfs.samples'
version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '17'
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/MIT-FS/Audit4Improve-API")
		credentials {
		//las propiedades gpr.user y gpr.key estÃ¡n configuradas en gradle.properties en el raiz del proyecto, y se aÃ±ade a .gitignore para que no se suban
		//O bien configuro las variables de entorno GITHUB_LOGIN y GITHUB_PACKAGES
			username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_LOGIN")
			password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_PACKAGES")
		}
	}
	maven {
		url="https://mvnrepository.com/artifact/com.spotify/github-client"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'us.mitfs.samples:a4i:0.1.2'	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
docker {
	registryCredentials {
		username = project.findProperty("gpr.dockerlog") ?: System.getenv("DOCKER_LOGIN")
		password = project.findProperty("gpr.dockerkey") ?: System.getenv("DOCKER_PWD")
	}
}
task copyJarToDockerContext(type: Copy) {
    dependsOn build
    from("build/libs/auditserver-0.0.1-SNAPSHOT.jar")
    into("build/docker")
}
task createDockerfile(type: Dockerfile) {
    group = 'docker'
    description = 'Construye el dockerfile del contenedor del servicio'
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:17-alpine'  
   // copyFile 'build/libs/auditserver-0.0.1-SNAPSHOT.jar', '/app/auditserver.jar'
    copyFile 'auditserver-0.0.1-SNAPSHOT.jar', '/app/auditserver.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/app/auditserver.jar'
    exposePort 8080
    runCommand 'apk --update --no-cache add curl'
  //  instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/health || exit 1'
}


task buildImage(type: DockerBuildImage) {
    dependsOn 'createDockerfile', 'copyJarToDockerContext'
    group = 'docker'
    description = 'Construye la imagen Docker del servicio REST'
    inputDir = file('build/docker')
    dockerFile = file('build/docker/Dockerfile')
    buildArgs = ['VERSION': version]    
    images.add("audit-server:${version}")
}




tasks.register('stopContainer') {
    doLast {
        exec {
            commandLine 'docker', 'stop', 'auditServerContainer'
        }
    }
}

tasks.register('removeContainer') {
    dependsOn 'stopContainer'
    doLast {
        exec {
            commandLine 'docker', 'rm', 'auditServerContainer'
        }
    }
}

tasks.register('kindClusterUp') {
	group = "kind"
	description = "Levanta un clúster kind local"
	doLast {
		exec {
			commandLine 'kind', 'create', 'cluster', '--name', 'audit-cluster'
		}
	}
}

tasks.register('kindClusterDown') {
	group = "kind"
	description = "Elimina el clúster kind"
	doLast {
		exec {
			commandLine 'kind', 'delete', 'cluster', '--name', 'audit-cluster'
		}
	}
}

tasks.register('loadDockerToKind') {
	group = "kind"
	description = "Carga la imagen Docker en el clúster kind"
	dependsOn 'buildDockerImage'
	doLast {
		exec {
			commandLine 'kind', 'load', 'docker-image', "audit-server:${version}", '--name', 'audit-cluster'
		}
	}
}

tasks.register('helmDeploy') {
	group = "helm"
	description = "Despliega el servicio con Helm"
	doLast {
		exec {
			commandLine 'helm', 'upgrade', '--install', 'audit-server', './helm', '--namespace', 'default', '--create-namespace'
		}
	}
}
tasks.register('localDeploy') {
	group = "deployment"
	description = "Despliegue completo en kind"
	dependsOn 'kindClusterUp', 'buildDockerImage', 'loadDockerToKind', 'helmDeploy'
}

tasks.register('localenv-up') {
    group = "localenv-lin"
	description = "Lenvantar el cluster en linux"
	doLast {
		exec {
			executable "./scripts/localenv/up.sh"
		}
	}
}

tasks.register('localenv-down') {
    group = "localenv-lin"
	description = "Detener el despliegue en linux"
	doLast {
		exec {
			executable "./scripts/localenv/down.sh"
		}
	}
}

tasks.register('localenv-build') {
    group = "localenv-lin"
	description = "Construir en linux"
	dependsOn 'localenv-up'
	doLast {
		exec {
			executable "./scripts/localenv/build.sh"
		}
	}
}

tasks.register('localenv-deploy') {
    group = "localenv-lin"
	description = "Despleguar en linux"
	dependsOn 'localenv-build'
	doLast {
		exec {
			executable "./scripts/localenv/deploy.sh"
		}
	}
}

tasks.register('localenv-win-up') {
    group = "localenv-win"
	description = "Lenvantar el cluster en windows"
   
    doLast {
		exec {
			commandLine  "powershell", "./scripts/localenv/win-up.ps1"
		}
	}
}

tasks.register('localenv-win-deploy') {
    group = "localenv-win"
	description = "Despliegue en windows"
   	doLast {
		exec {
			commandLine  "powershell", "./scripts/localenv/win-deploy.ps1"
		}
	}
}
tasks.register('localenv-win-down') {
    group = "localenv-win"
	description = "Detener el despliegue en windows"
	doLast {
		exec {
			commandLine  "powershell", "./scripts/localenv/win-down.ps1"
		}
	}
}
